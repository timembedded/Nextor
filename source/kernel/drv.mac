    .z80
    name('drv')
    title	MSX-DOS 2 ROM   Copyright (1986)  IS Systems Ltd.
    subttl	Substitute for the dummy disk driver module

; In MSX-DOS 2.3x, this was a dummy disk driver module that simply returned errors when called.
; Now this contains code that redirects calls to the driver bank.

;-----------------------------------------------------------------------------
;
    INCLUDE	macros.inc
    INCLUDE	const.inc
;
;-----------------------------------------------------------------------------
;
SCANKEYS equ 41EFh-3    ;As defined in init.mac

PRINTL	macro	NAME,VALUE
    if2
    .PRINTX % Size of NAME = VALUE bytes %
    endif
    endm

ALIGN	macro	ADDR
    if $-START gt ADDR-ORIGIN
    error	<Code overwraps at ADDR>
    PRINTL	<wrap at ADDR>,%($-START)-(ADDR-ORIGIN)
    org	ADDR-ORIGIN
    else
    PRINTL	<hole at ADDR>,%(ADDR-ORIGIN)-($-START)
    defs	(ADDR-ORIGIN)-($-START),0
    endif
endm

ORIGIN	equ	7600h

    ALIGN 7600h
;
;       External Routines.
;
;	extrn	PROMPT,SETINT,PRVINT,GETSLOT,GETWRK,DIV16,ENASLT,XFER
;
;       External Variables.
;
;	extrn	$SECBUF,RAMAD0,RAMAD1,RAMAD2,RAMAD3,RAWFLG
;
;       Public Values.
;
    public	DEFDPB
;


;-----------------------------------------------------------------------------

;The routine CHGFILE is invoked in disk emulation mode prior to any disk access.
;If checks if a valid file change key is being pressed, and if so,
;reloads the emulation data file and updates the information in DVB_TABLE.
;If no suitable key is being pressed, or if change is performed ok, returns Z.
;If there is an error reading the emulation data file, returns NZ and A=Error code.
;
CHGFILE:
    push hl
    push de
    push bc
    push ix
    push iy

    ;Check and change disk image if needed
    call CHGF2

    pop	 iy
    pop	 ix
    pop	 bc
    pop	 de
    pop	 hl
    ret

CHGF2:
    ld	 ix,(DVB_TABLE##)
    call GETCURKEY
    or   a
    ret  z
    cp   0FFh
    jr   nz,CHGF3

    call CAPSON
    call WAIT_KEY_RELEASE ;GRAPH pressed: wait for other keys to release...

CHGWA2:
    call GETCURKEY	;...then to be pressed again.
    or   a
    jr   z,CHGWA2

    cp   0FFh      ;User changed his mind and pressed GRAPH 
    jr   nz,CHGF3

    call WAIT_KEY_RELEASE
    ret

CHGF3:
    ld  c,a
    call CAPSON

    ;--- The key with index C is pressed

    ;> Do nothing if chosen file is the same currently in use

    ld	a,(ix+DSK_CURRENT_FILE_INDEX##)
    and	3Fh
    cp	c
    call z,CAPSOFF
    ret	z

    ;> Read emulation data file
CHGF3A:
    push bc

    ld	a,(ix+EMU_DEV_AND_LUN##) ;data file dev index + 16 * LUN index
    ld	d,a
    rrca
    rrca
    rrca
    rrca
    and	111b
    ld	b,a	;LUN
    ld	a,d
    and	111b	;Device

    ld	e,(ix+EMU_FILE_FIRST_SECTOR##)
    ld	d,(ix+EMU_FILE_FIRST_SECTOR##+1)
    ld	l,(ix+EMU_FILE_FIRST_SECTOR##+2)
    ld	h,(ix+EMU_FILE_FIRST_SECTOR##+3)
    call PUSH_HL_DE

    ld	iy,(0F348h-1)	;Master controller slot
    ld	hl,DEV_RW##
    ld	(BK4_ADD##),hl
    ld	c,b
    ld	b,1
    ld	hl,($SECBUF##)
    or	a

    push	ix
    ld	ix,CALDRV##
    call	CALSLT##	;Call DEV_RW
    pop	ix
    pop bc ; sector hl:de
    pop bc ; sector hl:de
    pop	bc
    call CAPSOFF
    or	a
    ret	nz

    ;> Set the new file data in work area

    ld  a,(ix+DSK_CURRENT_FILE_INDEX##)
    and 11000000b   ;In emulation mode flag + Russian keyboard flag
    ld  b,a
    ld	a,c
    or  b
    cp  (ix+DSK_CURRENT_FILE_INDEX##)
    jr  z,CHGF3B
    ld	(ix+DSK_CURRENT_FILE_INDEX##),a
    set	7,(ix+EMU_DEV_AND_LUN##) ;File changed flag
CHGF3B:

    dec	a
    add	a,a		;Each entry is 8 bytes
    add	a,a
    add	a,a
    ld	l,a
    ld	h,0
    ld	bc,24
    add	hl,bc
    ld	de,($SECBUF##)
    add	hl,de	;HL = Pointer to boot file data
    push ix
    pop	de
    inc	de
    inc	de  ;DE must point to DSK_CURRENT_FILE_DEVICE_INDEX in work area
    ld	bc,8
    ldir

    ld a,(ix+DSK_CURRENT_FILE_DEVICE_INDEX##) ;set DSK_CURRENT_FILE_DEVICE_INDEX and DSK_CURRENT_FILE_LUN_INDEX as same of data file if 0
    or a
    jr nz,CHGF4
    ld a,(ix+EMU_DEV_AND_LUN##)
    ld b,a
    and 00000111b
    ld (ix+DSK_CURRENT_FILE_DEVICE_INDEX##),a
    ld a,b
    rrca
    rrca
    rrca
    rrca
    and 00000111b
    ld (ix+DSK_CURRENT_FILE_LUN_INDEX##),a
CHGF4:
    ; setup cluster info
    ld  a,(ix+DSK_CURRENT_FILE_FIRST_SECTOR##+3) ; MSB
    inc a
    jr  nz,CHGF5 ; not fragmented
    ; has fragmentation
    dec a
    ld  (DSK_CURRENT_FILE_CLUS_SIZE##+1),a ; invalidate
    xor a
    ret
CHGF5:
    ; no fragmentation, set full disk as one cluster
    ld  a,(ix+DSK_CURRENT_FILE_SECTORS_COUNT##)
    ld  (DSK_CURRENT_FILE_CLUS_SIZE##),a
    ld  a,(ix+DSK_CURRENT_FILE_SECTORS_COUNT##+1)
    ld  (DSK_CURRENT_FILE_CLUS_SIZE##+1),a
    xor a
    ld  (DSK_CURRENT_FILE_CLUS_START##),a
    ld  (DSK_CURRENT_FILE_CLUS_START##+1),a
    ret

WAIT_KEY_RELEASE:
    call	GETCURKEY
    or	a
    jr	nz,WAIT_KEY_RELEASE
    ret


    ;Return in A the index of currently pressed key, 0 if none, FFh is GRAPH
    ;Input: IX = Pointer to emulation data area
GETCURKEY:
    ex af,af'
    ld a,(ix+DSK_CURRENT_FILE_INDEX##)
    rlca
    rlca
    rlca
    and 1   ;Russian keyboard?
    ex af,af'
    push ix
    ld	ix,SCANKEYS
    xor a
    call	CALBNK##
    pop ix
    bit 6,h
    ld a,0FFh
    ret nz
    ld c,b
    ld b,(ix+DSK_EMULATED_FILES_COUNT##)
    ld a,1

    ;HLDEC = key statuses
    ;B = Keys left to check
    ;A = Current key index
    ;We do an initial rotation because we want to start at key 1.
CHGLOOP:
    sra c
    rr e
    rr d
    rr l
    rr h
    bit 0,c
    ret nz

    inc a
    djnz CHGLOOP

    xor a
    ret

CAPSON:
    in	a,(0AAh)
    and	10111111b
    out	(0AAh),a
    ret

CAPSOFF:
    push	af
    in	a,(0AAh)
    or	01000000b
    out	(0AAh),a
    pop	af
    ret


; Push HL(msb):DE(lsb) on stack and return the address on stack in DE
; Modifies: HL,DE
PUSH_HL_DE:
    ex  (sp),hl     ; replace return address by HL (msb)
    push de         ; push DE (lsb), now the 32-bit value is stored from SP
    ex  de,hl
    push af
    ld  hl,2
    add hl,sp
    pop af
    ex  de,hl
    jp  (hl)        ; return, pointer to pushed value in DE


;The routine EMU_CHK_SEC is invoked before sector access in emulation mode
;to check if the correct cluster chain is selected for the current disk image
;
;Inputs: DE = sector number, B = number of sectors
;
EMU_CHK_SEC:
    push hl
    push bc
    push de

    ld	ix,(DVB_TABLE##)

    ld  a,(DSK_CURRENT_FILE_CLUS_SIZE##+1)
    inc a
    jr  z,CHGFCC_must_change    ; not initialized yet

    ; hl = sector - cluter_start, if negative, need to change
    ex   de,hl
    ld   de,(DSK_CURRENT_FILE_CLUS_START##)
    xor  a
    sbc  hl,de
    jr   c,CHGFCC_must_change
    ; sub size of cluter, if negative, need to change
    ; HL = sector number in this cluster
    ld   de,(DSK_CURRENT_FILE_CLUS_SIZE##)
    sbc  hl,de
    jr   nc,CHGFCC_must_change
    ; hl is negative now, add num of sectors
    ld   c,b
    ld   b,0
    dec  hl
    add  hl,bc
    ; if zero or possitive again the transfer needs to be split
    jr   nc,CHGFC1
    ; needs to be split; returns C-flag set, C = sectors for first transfer
    ld   a,c
    sub  l
    dec  a      ; A = positive number of sectors that can be read
    scf
CHGFC1:
    pop  de
    pop  bc
    jr   nc,CHGFC2
    ld   b,a
CHGFC2:
    pop  hl
    ret

CHGFCC_must_change:
    ; read emulation data

    ld	 a,(ix+DSK_CURRENT_FILE_INDEX##)
    and	 3Fh
    ld   c,a
    call CAPSON
    call CHGF3A

    ; Check and update cluster

    ld  c,(ix+DSK_CURRENT_FILE_FIRST_SECTOR##)
    ld  b,(ix+DSK_CURRENT_FILE_FIRST_SECTOR##+1)
    ld	iy,($SECBUF##)
    add iy,bc   ; iy = pointer to cluster entry
    pop  hl     ; hl = requested sector
    push hl
CHGF6:
    ld  c,(iy+4)
    ld  b,(iy+5)
    sbc hl,bc
    jr  c,CHGF7 ; sector is within this cluster
    ld  bc,6
    add iy,bc
    jr  CHGF6
CHGF7:
    ld  (DSK_CURRENT_FILE_CLUS_SIZE##),bc
    add hl,bc
    ex  de,hl   ; DE = offset of requested sector within this cluster
    pop hl      ; HL = requested sector
    push hl
    xor a
    sbc hl,de   ; HL = start sector of this cluster
    ld  (DSK_CURRENT_FILE_CLUS_START##),hl

    ld  b,4
CHGF8:
    ld  a,(iy)
    ld  (ix+DSK_CURRENT_FILE_FIRST_SECTOR##),a
    inc ix
    inc iy
    djnz CHGF8

    pop  de
    pop  bc
    pop  hl
    jp   EMU_CHK_SEC    ; do again to determine if the sectors will fit in this chunk


;--------------
;
; Check if we are in disk emulation mode
; Assumes IS_DVB has returned Cy=1 (that is, in DOS 1 mode and DVB_TABLE exists)
; Returns Cy=1 if in emulation mode, Cy=0 if not
; Corruputs: F

IS_EMU:
    push	iy
    ld	iy,(DVB_TABLE##)
    bit	7,(iy)
    pop	iy
    scf
    ret	nz
    ccf
    ret

;-----------------------------------------------------------------------------
;
; Check if the entry of DVB_TABLE pointed by IY has a partition assigned.
; Return A=0, Z if partition assigned; A<>0, NZ if NO partition assigned.

HAS_PARTITION:
    ld	a,(iy+UD1_FIRST_ABSOLUTE_SECTOR##)  ;No partition assigned
    and	(iy+UD1_FIRST_ABSOLUTE_SECTOR##+1)  ;if sector number is -1
    and	(iy+UD1_FIRST_ABSOLUTE_SECTOR##+2)
    and	(iy+UD1_FIRST_ABSOLUTE_SECTOR##+3)
    inc	a
    jr	z,RET_NZ
    xor	a
    ret
RET_NZ:
    inc	a
    ret

    ; Wait for VDP interrupt.
WAIT_VDP_INT:
    di
    ld	a,2
    out	(99h),a
    ld	a,8fh
    out	(99h),a
WVDP:
    in	a,(99h)
    and	81h
    dec	a
    jr	z,WVDP
    xor	a
    out	(99h),a
    ld	a,8fh
    out	(99h),a
    ret


    ALIGN 781Fh
;-----------------------------------------------------------------------------
;
; Null message. The address of this message can be returned by
; the CHOICE routine in the disk driver when the device can't be formatted.

null_message:
    db	0

; "Single side/double side" message, can be used when driving
; a legacy MSX disk drive

    db	"1 - Single side",13,10
    db	"2 - Double side",13,10
    db	0


; Moved here due to space constraints

DO_DIRCALL:
    pop	ix
    push	bc
    ld	bc,DV_D0##-DIRCALL-3
    add	ix,bc
    pop	bc
    jp	DO_CALBNK


;-----------------------------------------------------------------------------
;
; Entries for direct calls.
; Calls to these addresses will be translated to calls to the DV_DIRECTx
; entry points in the driver bank.

    ALIGN 7850h

DIRCALL:
    call	DO_DIRCALL
    call	DO_DIRCALL
    call	DO_DIRCALL
    call	DO_DIRCALL
    call	DO_DIRCALL


; Process the output of DSKIO so that Cy is set
; if an error has been returned.

DIO_SET_ERR_FLAG::
    push af
    ld a,(KSLOT##)
    or a
    jr z,DIO_SET_ERR_FLAG_END

    ;Device-based: set Cy if error code is not 0
    pop af
    or a
    ret z
    scf
    ret

    ;Drive-based driver: result will already have Cy set on error
DIO_SET_ERR_FLAG_END:
    pop af
    ret


;-----------------------------------------------------------------------------
;
; Entry for disk routine DSKIO. It is somewhat complex:
; if transfer involves page 1, then 1-sector transfers are done
; by using XFER and SECBUF.
;

DIO_ENTRY::
    push	af  ; stack: af
    call	IS_DVB
    jp	nc,DIO_ENTRY_DO

    ld	a,(iy+UD1_DEVICE_INDEX##)
    or	a
    jp	z,DISKERR

    call	IS_EMU
    jp	c,DIOEN_ISEMU

    ;>>> NOT in disk emulation mode

DIOEN_NOEMU: ; stack: af
    call	HAS_PARTITION
    call	nz,ASSIGN_PARTITION
    jp	nz,POP_CONV_ERR
    jp	DIOEN3

    ;>>> In disk emulation mode

DIOEN_ISEMU: ; stack: AF
    pop	af
    push af
    or	a

    jp	nz,DISKERR	;Drive number must be 0

    call CHGFILE
    jr	z,DIOCHGFOK
    pop	bc      ; XXX why return if changed?
    ld	b,0
    ret
DIOCHGFOK:  ; stack: AF

    ; Moan if sector number + sector count > dsk file size
    push de
    push bc
    ld	ix,(DVB_TABLE##)

    ex  de,hl
    ld	c,b
    ld	b,0
    add	hl,bc	;HL = Sector num + count

    dec	hl
    ld	c,(ix+DSK_CURRENT_FILE_SECTORS_COUNT##)
    ld	b,(ix+DSK_CURRENT_FILE_SECTORS_COUNT##+1) ;BC = dsk size in sectors
    sbc hl,bc
    ex  de,hl
    pop	bc
    pop	de
    jp	c,DIOEN1

    pop	af
    ld	a,8
    ld	b,0
    scf
    ret

DIOEN1:
    pop af

; DE = sector, HL = transfer address, B = sectors
DOCHUNK:    ; stack: -
    push bc
    push de ; original requested sector
    push af
    call EMU_CHK_SEC
    jr  nc,DOALL
    pop af

    ; split transfers, B = sectors for first transfer
    pop de
    push de
    push hl
    push bc
    push af
    call DOPARTIAL
    jr  nc,DIOES1
    inc sp  ; do not pop AF
    inc sp
    inc sp  ; do not pop BC
    inc sp
    pop hl
    pop de
    inc sp  ; do not pop BC (original number of sectors)
    inc sp
    scf
    ret
DIOES1:
    pop af
    pop bc  ; B = sectors read
    pop hl  ; HL = transfer address
    pop de  ; DE = restore original requested sector
    pop ix  ; original BC (original sectors requested)
    push ix
    push af
    push ix

    ; add B * 512 to HL (transfer address)
    ld  c,0
    add hl,bc
    add hl,bc

    ; add B (sectors) to DE (sector num)
    ld  c,b
    ld  b,0
    ex  de,hl
    add hl,bc
    ex  de,hl

    ; calculate remaining sectors
    pop af  ; A = original B (sectors), C = sectors just read
    push af
    sub c   ; A = remaining sectors
    pop bc
    ld  b,a
    pop af

    call DOCHUNK
    jr  c, DIOES1A
    pop bc  ; original BC
    ret
DIOES1A:
    inc sp  ; do not pop BC
    inc sp
    scf
    ret

DOALL:
    pop af
    pop de
    pop bc
DOPARTIAL:    ; stack: -
    push af

    ; Wait for VDP interrupt.
    ; This introduces a small delay that is required by some games.
    call WAIT_VDP_INT

    call	CAPSON
    pop	af
    call	DIOEN2
    call	CAPSOFF
    ret

DIOEN2:
    push	af
    ld iy,(DVB_TABLE)
DIOEN3:

    ; In this point one of these is true:
    ;
    ; - We are in disk emulation mode, and IY points to the beginning
    ;   of the work area for emulation mode.
    ;
    ; - We are in normal DOS 1 mode, and IY points to the entry
    ;   for the drive in DVB_TABLE.
    ;
    ; The following code is common to both cases, that's why
    ; device index, LUN index and first sector number must be stored
    ; at the same offset in both the DVB_TABLE entries (UD1_*)
    ; and the disk emulation work area (DSK_*).

    ld	a,1
    ld	(KSLOT##),a	;KSLOT=1 -> device-based

    push hl
    ld	l,(iy+UD1_FIRST_ABSOLUTE_SECTOR##)		; maps to DSK_CURRENT_FILE_FIRST_SECTOR when in emulation mode
    ld	h,(iy+UD1_FIRST_ABSOLUTE_SECTOR##+1)
    add	hl,de

    ex  de,hl   ; DE = lsb
    ld	l,(iy+UD1_FIRST_ABSOLUTE_SECTOR##+2)
    ld	h,(iy+UD1_FIRST_ABSOLUTE_SECTOR##+3)
    push de
    ld	de,0
    adc	hl,de
    pop de

    pop ix          ; restore transfer address
    pop af
    call PUSH_HL_DE ; DE = pointer to pushed value
    push af
    push ix
    pop hl          ; HL = transfer address again

    ld	c,(iy+UD1_LUN_INDEX##) ;Set LUN index
    pop	af                   ;From here Cy must be kept untouched
    ld	a,(iy+UD1_DEVICE_INDEX##) ;Set device index
    call DIO_ENTRY_DO_2

    inc sp  ; remove 32-bit sector from stack
    inc sp
    inc sp
    inc sp
    ret
        
;From here, the processing is almost the same for device-based drivers
;and for drive-based drivers, since the relevant parameters are almost the same
;(B for the sector count, HL for the transfer address, A and C are not touched).
;The only thing to take in account, is that for drive-based, DE contains
;the sector number; and for device-based, DE is a pointer to a 32 bit sector number.
;We use KSLOT to handle this difference.

DIO_ENTRY_DO: ; stack: af
    xor	a
    ld	(KSLOT##),a	;KSLOT=0 -> drive-based
    pop	af
DIO_ENTRY_DO_2: ; stack: -

    ; If the transfer starts and ends in page 0,
    ; ir of it starts in page 2 or 3,
    ; do all the transfer with a simple call to the driver

    push	af
    bit	7,h
    jp	nz,DIO_NOP1	;Transfer starts in page 2 or 3?
    push	hl
    push	bc
    sla	b
    ld	c,0	;Now BC = number of bytes to read
    add	hl,bc
    dec	hl	;Now HL = last read or written address
    ld	a,h
    and	11000000b	;Last accessed address in page 0?
    pop	bc
    pop	hl
    jp	z,DIO_NOP1
    pop	af

    jp	c,DIO_WR_LOOP

    ; Loop for reading to page 1

DIO_RD_LOOP:
    push	af
    bit	7,h
    jp	nz,DIO_NOP1	;If not in page 0/1 anymore,
    push	bc		;do the remaining transfer
    push	de		;with a simple call to the driver
    push	hl
    
    or	a
    call DIO_DO_CALDRV
    jr	nc,DIO_RD_OK

    pop	hl	;On disk error, just return
    pop	de
    pop	bc
    pop	bc	;Not POP AF, to preserve error info
    jp	CONV_ERR
DIO_RD_OK:
    
    ld	hl,($SECBUF##)
    pop	de	;Was PUSH HL
    push	de
    ld	bc,512
    call	XFER##

    pop	hl
    pop	de
    pop	bc
    inc	h
    inc	h	;Increase destination address by 512
    call	DIO_INC_DE
    pop	af
    djnz	DIO_RD_LOOP

    xor	a
    ret

    ; Loop for writing from page 1

DIO_WR_LOOP:
    push	af
    bit	7,h
    jr	nz,DIO_NOP1	;If not in page 0/1 anymore,
    push	hl		;do the remaining transfer
    push	bc		;with a simple call to the driver
    push	de

    ld	de,($SECBUF##)
    ld	bc,512
    call	XFER##	;Preserves AF

    pop	de
    pop	bc
    push	bc
    push	de

    scf
    call DIO_DO_CALDRV
    jr	nc,DIO_WR_OK

    pop	de	;On disk error, just return
    pop	bc
    pop	hl
    pop	hl	;Not POP AF, to preserve error info
    ret

DIO_WR_OK:
    pop	de
    pop	bc
    pop	hl
    inc	h
    inc	h	;Increase destination address by 512
    call	DIO_INC_DE
    pop	af
    djnz	DIO_WR_LOOP

    xor	a
    ret	


DIO_DO_CALDRV:
    ld	hl,($SECBUF##)
    ld	b,1
    
    ld	ix,DV_DSKIO##
    ex	af,af'
    ld	a,DV_BANK##
    call	CALBNK##
    jp DIO_SET_ERR_FLAG


; Jump here when the transfer can be done in a single step
; (no page 1 involved)

DIO_NOP1:
    pop	af
    ld	ix,DV_DSKIO##
    call	DO_CALBNK
    jp	CONV_ERR


;This subroutine increases the sector number by one.
;Corrupts AF, IX.

DIO_INC_DE:
    ld	a,(KSLOT##)
    or	a
    jr	nz,DIO_INC_DE_DVB

    ;Drive-based: simply increment DE.
    ;Note that C can't hold sector number,
    ;since this will be called in DOS 1 mode only,
    ;and DOS 1 does not support FAT16,
    ;so sector numbers are always 16 bit.

    inc	de
    ret

    ;Device-based: increment the 32 bit number pointed by DE

DIO_INC_DE_DVB:
    push	hl
    push	de
    pop	ix
    ld	l,(ix)
    ld	h,(ix+1)
    inc	hl
    ld	(ix),l
    ld	(ix+1),h
    ld	a,h
    or	l	
    jr	nz,DIO_INC_DE_DVB_END
    ld	l,(ix+2)
    ld	h,(ix+3)
    inc	hl
    ld	(ix+2),l
    ld	(ix+3),h
DIO_INC_DE_DVB_END:
    pop	hl
    ret

;-----------------------------------------------------------------------------
;
    ; General disk routines entry

    ;--- Check disk change status

CHG_ENTRY::
    call	IS_DVB
    ld	ix,DV_CHGDSK##
    jp	nc,DO_CALBNK

    ld	d,a
    ld	a,(iy+UD1_DEVICE_INDEX##)
    or	a
    jp	z,DISKERR

    call	IS_EMU
    jp	nc,CHGEN_NOEMU

    ;>>> In disk emulation mode

    ld	a,d
    or	a
    jp	nz,DISKERR	;Drive number must be 0

    call CHGFILE
    ret	nz

    xor	a
    ld	ix,(DVB_TABLE##)
    bit	7,(ix+EMU_DEV_AND_LUN##)
    res	7,(ix+EMU_DEV_AND_LUN##)
    ld	b,1     ;"Unchanged"
    ret	z
    ld	a,d
    jp	DPBEN2

    ;>>> NOT in disk emulation mode

CHGEN_NOEMU:

    ;Drive-based mapping:
    ;Return "changed" if partition has changed, "unchanged" otherwise

    ld	a,(iy+UD1_RELATIVE_DRIVE##)
    ld	c,a
    res	7,(iy+UD1_RELATIVE_DRIVE##)
    and	10000000b	;Check partition changed flag
    ld	b,-1
    ld	a,c
    jr	nz,DO_MKDPB	;"Changed" if partition has changed
    xor	a
    ld	b,1	;"Unchanged" if partition has not changed
    ret

    ;--- Obtain DPB, input: IY=Entry in DVB_TABLE, HL=Address for DPB

DPB_ENTRY::
    call	IS_DVB
    ld	ix,DV_GETDPB##
    jp	nc,DO_CALBNK

    call	IS_EMU
    jr	nc,DO_MKDPB

    ;>>> In disk emulation mode

    ;or	a
    ;jp	nz,DISKERR	;Drive number must be 0

    call CHGFILE
    ret	nz

    push bc
    ld de,0
    ld b,1
    call EMU_CHK_SEC    ; only one sector, never need to split transfers
    pop bc

    jr	DPBEN2

    ;>>> NOT in disk emulation mode

DO_MKDPB:
    call	HAS_PARTITION
    call	nz,ASSIGN_PARTITION
    jp	nz,CONV_ERR

DPBEN2:
    push hl
    ld	e,(iy+UD1_FIRST_ABSOLUTE_SECTOR##)
    ld	d,(iy+UD1_FIRST_ABSOLUTE_SECTOR##+1)
    ld	l,(iy+UD1_FIRST_ABSOLUTE_SECTOR##+2)
    ld	h,(iy+UD1_FIRST_ABSOLUTE_SECTOR##+3)
    call PUSH_HL_DE     ; DE = pointer to value on stack
    ld	a,(iy+UD1_DEVICE_INDEX##)
    ld	b,1
    ld	c,(iy+UD1_LUN_INDEX##)
    ld	hl,($SECBUF##)
    or	a
    ld	ix,DEV_RW##
    call	DO_CALBNK
    pop de ; remove 32-bit sector number from stack
    pop de ; remove 32-bit sector number from stack
    pop de
    inc	de
    or	a
    jp	nz,CONV_ERR

    ld	hl,($SECBUF##)
    ld	bc,MKDPB##
    ld	(BK4_ADD##),bc
    call	C4PBK##

    if 0

spfat::
    ld	a,(DOS_VER##)
    or	a
    jr	nz,MKDPB_OK_SECPERFAT
    ld	ix,($SECBUF##)
    ld	a,(ix+17h)
    or	a
    jp	nz,DISKERR
    ld	a,(ix+16h)
    cp	4
    jp	nc,DISKERR
MKDPB_OK_SECPERFAT:

    endif

    xor	a
    ret
    
    ;--- Format choice

CHO_ENTRY::
    call	IS_DVB
    ld	ix,DV_CHOICE##
    jp	nc,DO_CALBNK
    
    ld	hl,781fh	;Formatting is no supported yet for device-based drivers
    ret

    ;--- Format device

FMT_ENTRY::
    call	IS_DVB
    ld	ix,DV_CHOICE##
    jp	nc,DO_CALBNK
    
    ld	a,16		;Formatting is no supported yet for device-based drivers
    scf
    ret

    ;--- Motor off

MOF_ENTRY::
    call	IS_DVB
    ld	ix,DV_MTOFF##
    jp	nc,DO_CALBNK

    ret

DO_CALBNK:
    ex	af,af'
    ld	a,DV_BANK##
    jp	CALBNK##


    ;--- Jump here when an operation is requested
    ;    on an existing, but empty, entry in DVB_TABLE

DISKERR:
    ld	a,12
    scf
    ret


;-----------------------------------------------------------------------------
;
; Check if the relative drive pointer by A refers to a device-based driver
; and we are in DOS 1 mode. If so, returns Cy=1 and IY=pointer to the
; table entry in DVB_TABLE. Otherwise returns Cy=0.
; Corrupts IY, F.

IS_DVB:
    push	af
    ld	a,(DOS_VER##)
    or	a
    jr	nz,IS_NOT_DVB

    ld	iy,(DVB_TABLE##)
    ld a,iyh
    or iyl
    jr	z,IS_NOT_DVB

    ld	a,(iy)
    and	80h
    jr	z,IS_DVB_NOEMU

    pop	af	;In emulation mode: return Cy=1 only if drive is 0
    or	a
    scf
    ret	z

    ccf
    ret

IS_DVB_NOEMU:
    pop	af
    push	af
    push	bc
    ld	c,a	;C = Drive number
    ld	b,(iy)	;B = num of entries in DVB_TABLE
    inc	iy

IS_DVB_LOOP:
    push bc
    ld	a,(KSLOT##)
    ld b,(iy+UD1_SLOT##)
    res 6,b
    cp b
    pop bc	
    jr	nz,DIO_NEXT

    ld	a,(iy+UD1_RELATIVE_DRIVE##)
    and	01111111b	;Ignore partition changed flag
    cp	c
    jr	nz,DIO_NEXT

DIO_OK:
    pop	bc	;Found, return Cy=1
    pop	af
    scf
    ret

DIO_NEXT:
    push	bc
    ld	bc,8
    add	iy,bc
    pop	bc
    djnz	IS_DVB_LOOP
    pop	bc

IS_NOT_DVB:
    pop	af
    scf
    ccf
    ret


;-----------------------------------------------------------------------------
;
; Assign the first available FAT12 primary partition to
; the device whose entry of DVB_TABLE pointed by IY.
; Returns disk error code in A, with Z appropriately set.
; Corrupts: AF, IX.

MBR_PSTART	equ	01BEh	;Start of partition table in MBR
MBR_PSIZE	equ	16	;Size of partition table entry
POFF_TYPE	equ	4	;Offset of partition type in p. table entry
POFF_PSTART	equ	8	;Offset of partition start in p. table entry
POFF_PSIZE	equ	12	;Offset of partition size in p. table entry
PT_FAT12	equ	1	;Partition type code for FAT12

ASSIGN_PARTITION:
    push bc
    push de
    push hl
    push iy

    pop hl
    push hl

    ld b,(iy+UD1_DEVICE_INDEX##)
    ld c,(iy+UD1_LUN_INDEX##)
    ld a,4
    ld d,0
    ld	ix,AUTO_ASPART##
    call	CALBNK##

    pop iy
    pop hl
    pop de
    pop bc

    or a
    ret z
    ld a,12
    ret

;-----------------------------------------------------------------------------
;
; Convert the disk error returned by a device-based routine,
; into its drive-based equivalent

POP_CONV_ERR:
	inc	sp
	inc	sp

CONV_ERR:
	or	a
	ret	z

	push	bc
	ld	b,0
	cp	.WPROT##
	jr	z,CONV_ERR_END
	ld	b,2
	cp	.NRDY##
	jr	z,CONV_ERR_END
	ld	b,4
	cp	.DATA##
	jr	z,CONV_ERR_END
	ld	b,6
	cp	.SEEK##
	jr	z,CONV_ERR_END
	ld	b,8
	cp	.RNF##
	jr	z,CONV_ERR_END
	ld	b,10
	cp	.WRERR##
	jr	z,CONV_ERR_END
	ld	b,12

CONV_ERR_END:
	ld	a,b
	pop	bc
	scf
	ret

COMP16:
	ld	a,h
	sub	d
	ret	nz
	ld	a,l
	sub	e
	ret

;-----------------------------------------------------------------------------
;
; Default DPB, it contains data for a 720K disk drive

    ALIGN 7BAAh

DEFDPB:
    DB	0FFh

    DB	0F9h
    DW	512		
    DB	15		
    DB	4		
    DB	1		
    DB	2		
    DW	1		
    DB	2		
    DB	112		
    DW	14		
    DW	714		
    DB	3		
    DW	7
;

    ALIGN 7BC0h

; Hooks to jump to KABR (kernel disk error abort routine) and KDERR 
; (kernel disk error handler routine) on disk error.
;
; When MSX-BASIC starts the KAB_VECT and KDSK_VECT vectors need to be set to 
; KAB_ROUTINE and KDSK_ROUTINE, respectively, which are defined in bdos.mac.
; This is done at the start of BDOS_GO, also in bdos.mac.
;
; In MSX-DOS 2 and Nextor 2.0 the vectors are set to point directly to
; these routines. However in Nextor 2.1 we need an intermediate step since
; the old CP/M-style file handling functions have been moved to bank 4. Otherwise,
; if these functions throw an error, the routines are wrongly invoked while bank 4
; is still switched (see GO_ABORT and GO_EXIT in bank2/err.mac),
; causing the computer to crash since the routines are actually in bank 0.
;
; Thus, the vectors are set to point to these intermediate KABJ and KDERJ hooks.
; These exist also in bank 4 (see banck/dskab.mac), where they have
; "xor a - call CHGBNK" at the same address of the four "nop"s here. Thus right after
; bank 0 is restored, the jp KABR/KDERR is executed and the error handler
; continues as expected.
;
; KABR and KDERR are also defined in bank3/dos1ker.mac in order to prevent a
; compilation error. The definitions there are stubs since these hooks are
; never used in MSX-DOS 1 mode.

KABJ:
    nop
    nop
    nop
    nop
    jp KABR##

KDERJ:
    nop
    nop
    nop
    nop
    jp KDERR##

    ALIGN 7BD0h
    ;Here goes the 1K free area at the end of banks 0 and 3

    finish	<DRV>
;
    end
;
